/**
 * 位运算:
 *  & (按位与)
    | (按位或)
    ^ (异或: 不一样就为 1, 一样就为 0)
    ~ (取反)
    << (左移, 相当于 乘 2^n)
    >> (右移, 相当于 除以 2^n)
 */
#include <iostream>
using namespace std;

void print(int a, int b, int c) {
  cout << dec << a << endl;
  cout << dec << b << endl;
  cout << dec << c << endl;
  cout << endl;
}

int main() {
  /*=== 1. & 取一个数中的某些指定位 ===*/
  // a: 00 10 11 00 10 10 11 00
  // b: 00 00 00 00 11 11 11 11
  // c: 00 00 00 00 10 10 11 00
  // 取 a 的低8位
  int a = 0b0010110010101100, b = 0b11111111;
  int c = a & b;
  print(a, b, c);

  /*=== 2. | 对某个数的某些位取定值 1 ===*/

  /*=== 3. ^ 使特定位翻转 ===*/
  // a: 01111010
  // b: 00001111
  // c: 01110101
  // 使 a 的低4位翻转
  a = 0b01111010;
  b = 0b00001111;
  c = a ^ b;
  print(a, b, c);

  /*=== 4. ^ 不使用临时变量, 交换两个值 ===*/
  // a: 011
  // b: 100
  // -------
  // a: 111 (a ^ b)
  // b: 100
  // -------
  // b: 011 (b ^ a)
  // a: 111
  // -------
  // a: 100 (a ^ b)
  a = 3;
  b = 4;
  cout << a << " " << b << endl;
  a = a ^ b;
  b = a ^ b;
  a = a ^ b;
  cout << a << " " << b << endl;
  return 0;
}
